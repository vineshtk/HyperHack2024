
#!/bin/bash

function createOrderer() {
  export DOMAIN_NAME="greencredits.com"
  export ORDERER_CA_PORT=7054
  echo "Enrolling the CA admin"
  mkdir -p organizations/ordererOrganizations/${DOMAIN_NAME}

  export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/ordererOrganizations/${DOMAIN_NAME}

  set -x
  fabric-ca-client enroll -u https://admin:adminpw@localhost:${ORDERER_CA_PORT} --caname ca-orderer --tls.certfiles "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem"
  { set +x; } 2>/dev/null

  echo "NodeOUs:
  Enable: true
  ClientOUIdentifier:
    Certificate: cacerts/localhost-${ORDERER_CA_PORT}-ca-orderer.pem
    OrganizationalUnitIdentifier: client
  PeerOUIdentifier:
    Certificate: cacerts/localhost-${ORDERER_CA_PORT}-ca-orderer.pem
    OrganizationalUnitIdentifier: peer
  AdminOUIdentifier:
    Certificate: cacerts/localhost-${ORDERER_CA_PORT}-ca-orderer.pem
    OrganizationalUnitIdentifier: admin
  OrdererOUIdentifier:
    Certificate: cacerts/localhost-${ORDERER_CA_PORT}-ca-orderer.pem
    OrganizationalUnitIdentifier: orderer" > "${PWD}/organizations/ordererOrganizations/${DOMAIN_NAME}/msp/config.yaml"

  # Since the CA serves as both the organization CA and TLS CA, copy the org's root cert that was generated by CA startup into the org level ca and tlsca directories

  # Copy orderer org's CA cert to orderer org's /msp/tlscacerts directory (for use in the channel MSP definition)
  mkdir -p "${PWD}/organizations/ordererOrganizations/${DOMAIN_NAME}/msp/tlscacerts"
  cp "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem" "${PWD}/organizations/ordererOrganizations/${DOMAIN_NAME}/msp/tlscacerts/tlsca.${DOMAIN_NAME}-cert.pem"

  # Copy orderer org's CA cert to orderer org's /tlsca directory (for use by clients)
  mkdir -p "${PWD}/organizations/ordererOrganizations/${DOMAIN_NAME}/tlsca"
  cp "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem" "${PWD}/organizations/ordererOrganizations/${DOMAIN_NAME}/tlsca/tlsca.${DOMAIN_NAME}-cert.pem"

  echo "Registering orderer"
  set -x
  fabric-ca-client register --caname ca-orderer --id.name orderer --id.secret ordererpw --id.type orderer --tls.certfiles "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem"
  { set +x; } 2>/dev/null

  echo "Registering the orderer admin"
  set -x
  fabric-ca-client register --caname ca-orderer --id.name ordererAdmin --id.secret ordererAdminpw --id.type admin --tls.certfiles "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem"
  { set +x; } 2>/dev/null

  echo "Generating the orderer msp"
  set -x
  fabric-ca-client enroll -u https://orderer:ordererpw@localhost:${ORDERER_CA_PORT} --caname ca-orderer -M "${PWD}/organizations/ordererOrganizations/${DOMAIN_NAME}/orderers/orderer.${DOMAIN_NAME}/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem"
  { set +x; } 2>/dev/null

  cp "${PWD}/organizations/ordererOrganizations/${DOMAIN_NAME}/msp/config.yaml" "${PWD}/organizations/ordererOrganizations/${DOMAIN_NAME}/orderers/orderer.${DOMAIN_NAME}/msp/config.yaml"

  echo "Generating the orderer-tls certificates, use --csr.hosts to specify Subject Alternative Names"
  set -x
  fabric-ca-client enroll -u https://orderer:ordererpw@localhost:${ORDERER_CA_PORT} --caname ca-orderer -M "${PWD}/organizations/ordererOrganizations/${DOMAIN_NAME}/orderers/orderer.${DOMAIN_NAME}/tls" --enrollment.profile tls --csr.hosts orderer.${DOMAIN_NAME} --csr.hosts localhost --tls.certfiles "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem"
  { set +x; } 2>/dev/null

  # Copy the tls CA cert, server cert, server keystore to well known file names in the orderer's tls directory that are referenced by orderer startup config
  cp "${PWD}/organizations/ordererOrganizations/${DOMAIN_NAME}/orderers/orderer.${DOMAIN_NAME}/tls/tlscacerts/"* "${PWD}/organizations/ordererOrganizations/${DOMAIN_NAME}/orderers/orderer.${DOMAIN_NAME}/tls/ca.crt"
  cp "${PWD}/organizations/ordererOrganizations/${DOMAIN_NAME}/orderers/orderer.${DOMAIN_NAME}/tls/signcerts/"* "${PWD}/organizations/ordererOrganizations/${DOMAIN_NAME}/orderers/orderer.${DOMAIN_NAME}/tls/server.crt"
  cp "${PWD}/organizations/ordererOrganizations/${DOMAIN_NAME}/orderers/orderer.${DOMAIN_NAME}/tls/keystore/"* "${PWD}/organizations/ordererOrganizations/${DOMAIN_NAME}/orderers/orderer.${DOMAIN_NAME}/tls/server.key"

  # Copy orderer org's CA cert to orderer's /msp/tlscacerts directory (for use in the orderer MSP definition)
  mkdir -p "${PWD}/organizations/ordererOrganizations/${DOMAIN_NAME}/orderers/orderer.${DOMAIN_NAME}/msp/tlscacerts"
  cp "${PWD}/organizations/ordererOrganizations/${DOMAIN_NAME}/orderers/orderer.${DOMAIN_NAME}/tls/tlscacerts/"* "${PWD}/organizations/ordererOrganizations/${DOMAIN_NAME}/orderers/orderer.${DOMAIN_NAME}/msp/tlscacerts/tlsca.${DOMAIN_NAME}-cert.pem"

  echo "Generating the admin msp"
  set -x
  fabric-ca-client enroll -u https://ordererAdmin:ordererAdminpw@localhost:${ORDERER_CA_PORT} --caname ca-orderer -M "${PWD}/organizations/ordererOrganizations/${DOMAIN_NAME}/users/Admin@${DOMAIN_NAME}/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem"
  { set +x; } 2>/dev/null

  cp "${PWD}/organizations/ordererOrganizations/${DOMAIN_NAME}/msp/config.yaml" "${PWD}/organizations/ordererOrganizations/${DOMAIN_NAME}/users/Admin@${DOMAIN_NAME}/msp/config.yaml"
}
  createOrderer
  
function createBuyerCertificates(){
	# Define dynamic variables
	export ORG_NAME_DOMAIN="buyer.greencredits.com"
	export ORG_NAME="buyer"
	export CA_PORT=7064

	echo "Enrolling the CA admin"
	mkdir -p organizations/peerOrganizations/${ORG_NAME_DOMAIN}/

	export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/

	set -x
	fabric-ca-client enroll -u https://admin:adminpw@localhost:${CA_PORT} --caname ca-${ORG_NAME} --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

  echo "NodeOUs:
  Enable: true
  ClientOUIdentifier:
    Certificate: cacerts/localhost-${CA_PORT}-ca-${ORG_NAME}.pem
    OrganizationalUnitIdentifier: client
  PeerOUIdentifier:
    Certificate: cacerts/localhost-${CA_PORT}-ca-${ORG_NAME}.pem
    OrganizationalUnitIdentifier: peer
  AdminOUIdentifier:
    Certificate: cacerts/localhost-${CA_PORT}-ca-${ORG_NAME}.pem
    OrganizationalUnitIdentifier: admin
  OrdererOUIdentifier:
    Certificate: cacerts/localhost-${CA_PORT}-ca-${ORG_NAME}.pem
    OrganizationalUnitIdentifier: orderer" > "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/config.yaml"

	# Since the CA serves as both the organization CA and TLS CA, copy the org's root cert that was generated by CA startup into the org level ca and tlsca directories

	# Copy ${ORG_NAME}'s CA cert to ${ORG_NAME}'s /msp/tlscacerts directory (for use in the channel MSP definition)
	mkdir -p "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/tlscacerts"
	cp "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/tlscacerts/ca.crt"

	# Copy ${ORG_NAME}'s CA cert to ${ORG_NAME}'s /tlsca directory (for use by clients)
	mkdir -p "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/tlsca"
	cp "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/tlsca/tlsca.${ORG_NAME_DOMAIN}-cert.pem"

	# Copy ${ORG_NAME}'s CA cert to ${ORG_NAME}'s /ca directory (for use by clients)
	mkdir -p "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/ca"
	cp "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/ca/ca.${ORG_NAME_DOMAIN}-cert.pem"

	echo "Registering user"
	set -x
	fabric-ca-client register --caname ca-${ORG_NAME} --id.name user1 --id.secret user1pw --id.type client --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	echo "Registering the org admin"
	set -x
	fabric-ca-client register --caname ca-${ORG_NAME} --id.name ${ORG_NAME}admin --id.secret ${ORG_NAME}adminpw --id.type admin --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	echo "Generating the user msp"
	set -x
	fabric-ca-client enroll -u https://user1:user1pw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/users/User1@${ORG_NAME_DOMAIN}/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/config.yaml" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/users/User1@${ORG_NAME_DOMAIN}/msp/config.yaml"

	echo "Generating the org admin msp"
	set -x
	fabric-ca-client enroll -u https://${ORG_NAME}admin:${ORG_NAME}adminpw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/users/Admin@${ORG_NAME_DOMAIN}/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/config.yaml" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/users/Admin@${ORG_NAME_DOMAIN}/msp/config.yaml"



	# Define dynamic variables
	export PEER="peer0"

	echo "Registering ${PEER}"
	set -x
	fabric-ca-client register --caname ca-${ORG_NAME} --id.name ${PEER} --id.secret ${PEER}pw --id.type peer --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	echo "Generating the ${PEER} msp"
	set -x
	fabric-ca-client enroll -u https://${PEER}:${PEER}pw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/config.yaml" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/msp/config.yaml"

	echo "Generating the ${PEER}-tls certificates, use --csr.hosts to specify Subject Alternative Names"
	set -x
	fabric-ca-client enroll -u https://${PEER}:${PEER}pw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls" --enrollment.profile tls --csr.hosts ${PEER}.${ORG_NAME_DOMAIN} --csr.hosts localhost --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	# Copy the tls CA cert, server cert, server keystore to well known file names in the peer's tls directory that are referenced by peer startup config
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/tlscacerts/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/ca.crt"
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/signcerts/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/server.crt"
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/keystore/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/server.key"
		
		

	# Define dynamic variables
	export PEER="peer1"

	echo "Registering ${PEER}"
	set -x
	fabric-ca-client register --caname ca-${ORG_NAME} --id.name ${PEER} --id.secret ${PEER}pw --id.type peer --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	echo "Generating the ${PEER} msp"
	set -x
	fabric-ca-client enroll -u https://${PEER}:${PEER}pw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/config.yaml" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/msp/config.yaml"

	echo "Generating the ${PEER}-tls certificates, use --csr.hosts to specify Subject Alternative Names"
	set -x
	fabric-ca-client enroll -u https://${PEER}:${PEER}pw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls" --enrollment.profile tls --csr.hosts ${PEER}.${ORG_NAME_DOMAIN} --csr.hosts localhost --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	# Copy the tls CA cert, server cert, server keystore to well known file names in the peer's tls directory that are referenced by peer startup config
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/tlscacerts/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/ca.crt"
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/signcerts/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/server.crt"
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/keystore/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/server.key"
		
		
	}
	createBuyerCertificates
function createFinancialinstitutionCertificates(){
	# Define dynamic variables
	export ORG_NAME_DOMAIN="financialinstitution.greencredits.com"
	export ORG_NAME="financialinstitution"
	export CA_PORT=7074

	echo "Enrolling the CA admin"
	mkdir -p organizations/peerOrganizations/${ORG_NAME_DOMAIN}/

	export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/

	set -x
	fabric-ca-client enroll -u https://admin:adminpw@localhost:${CA_PORT} --caname ca-${ORG_NAME} --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

  echo "NodeOUs:
  Enable: true
  ClientOUIdentifier:
    Certificate: cacerts/localhost-${CA_PORT}-ca-${ORG_NAME}.pem
    OrganizationalUnitIdentifier: client
  PeerOUIdentifier:
    Certificate: cacerts/localhost-${CA_PORT}-ca-${ORG_NAME}.pem
    OrganizationalUnitIdentifier: peer
  AdminOUIdentifier:
    Certificate: cacerts/localhost-${CA_PORT}-ca-${ORG_NAME}.pem
    OrganizationalUnitIdentifier: admin
  OrdererOUIdentifier:
    Certificate: cacerts/localhost-${CA_PORT}-ca-${ORG_NAME}.pem
    OrganizationalUnitIdentifier: orderer" > "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/config.yaml"

	# Since the CA serves as both the organization CA and TLS CA, copy the org's root cert that was generated by CA startup into the org level ca and tlsca directories

	# Copy ${ORG_NAME}'s CA cert to ${ORG_NAME}'s /msp/tlscacerts directory (for use in the channel MSP definition)
	mkdir -p "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/tlscacerts"
	cp "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/tlscacerts/ca.crt"

	# Copy ${ORG_NAME}'s CA cert to ${ORG_NAME}'s /tlsca directory (for use by clients)
	mkdir -p "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/tlsca"
	cp "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/tlsca/tlsca.${ORG_NAME_DOMAIN}-cert.pem"

	# Copy ${ORG_NAME}'s CA cert to ${ORG_NAME}'s /ca directory (for use by clients)
	mkdir -p "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/ca"
	cp "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/ca/ca.${ORG_NAME_DOMAIN}-cert.pem"

	echo "Registering user"
	set -x
	fabric-ca-client register --caname ca-${ORG_NAME} --id.name user1 --id.secret user1pw --id.type client --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	echo "Registering the org admin"
	set -x
	fabric-ca-client register --caname ca-${ORG_NAME} --id.name ${ORG_NAME}admin --id.secret ${ORG_NAME}adminpw --id.type admin --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	echo "Generating the user msp"
	set -x
	fabric-ca-client enroll -u https://user1:user1pw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/users/User1@${ORG_NAME_DOMAIN}/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/config.yaml" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/users/User1@${ORG_NAME_DOMAIN}/msp/config.yaml"

	echo "Generating the org admin msp"
	set -x
	fabric-ca-client enroll -u https://${ORG_NAME}admin:${ORG_NAME}adminpw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/users/Admin@${ORG_NAME_DOMAIN}/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/config.yaml" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/users/Admin@${ORG_NAME_DOMAIN}/msp/config.yaml"



	# Define dynamic variables
	export PEER="peer0"

	echo "Registering ${PEER}"
	set -x
	fabric-ca-client register --caname ca-${ORG_NAME} --id.name ${PEER} --id.secret ${PEER}pw --id.type peer --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	echo "Generating the ${PEER} msp"
	set -x
	fabric-ca-client enroll -u https://${PEER}:${PEER}pw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/config.yaml" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/msp/config.yaml"

	echo "Generating the ${PEER}-tls certificates, use --csr.hosts to specify Subject Alternative Names"
	set -x
	fabric-ca-client enroll -u https://${PEER}:${PEER}pw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls" --enrollment.profile tls --csr.hosts ${PEER}.${ORG_NAME_DOMAIN} --csr.hosts localhost --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	# Copy the tls CA cert, server cert, server keystore to well known file names in the peer's tls directory that are referenced by peer startup config
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/tlscacerts/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/ca.crt"
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/signcerts/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/server.crt"
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/keystore/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/server.key"
		
		

	# Define dynamic variables
	export PEER="peer1"

	echo "Registering ${PEER}"
	set -x
	fabric-ca-client register --caname ca-${ORG_NAME} --id.name ${PEER} --id.secret ${PEER}pw --id.type peer --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	echo "Generating the ${PEER} msp"
	set -x
	fabric-ca-client enroll -u https://${PEER}:${PEER}pw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/config.yaml" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/msp/config.yaml"

	echo "Generating the ${PEER}-tls certificates, use --csr.hosts to specify Subject Alternative Names"
	set -x
	fabric-ca-client enroll -u https://${PEER}:${PEER}pw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls" --enrollment.profile tls --csr.hosts ${PEER}.${ORG_NAME_DOMAIN} --csr.hosts localhost --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	# Copy the tls CA cert, server cert, server keystore to well known file names in the peer's tls directory that are referenced by peer startup config
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/tlscacerts/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/ca.crt"
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/signcerts/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/server.crt"
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/keystore/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/server.key"
		
		
	}
	createFinancialinstitutionCertificates
function createGovernmentCertificates(){
	# Define dynamic variables
	export ORG_NAME_DOMAIN="government.greencredits.com"
	export ORG_NAME="government"
	export CA_PORT=7084

	echo "Enrolling the CA admin"
	mkdir -p organizations/peerOrganizations/${ORG_NAME_DOMAIN}/

	export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/

	set -x
	fabric-ca-client enroll -u https://admin:adminpw@localhost:${CA_PORT} --caname ca-${ORG_NAME} --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

  echo "NodeOUs:
  Enable: true
  ClientOUIdentifier:
    Certificate: cacerts/localhost-${CA_PORT}-ca-${ORG_NAME}.pem
    OrganizationalUnitIdentifier: client
  PeerOUIdentifier:
    Certificate: cacerts/localhost-${CA_PORT}-ca-${ORG_NAME}.pem
    OrganizationalUnitIdentifier: peer
  AdminOUIdentifier:
    Certificate: cacerts/localhost-${CA_PORT}-ca-${ORG_NAME}.pem
    OrganizationalUnitIdentifier: admin
  OrdererOUIdentifier:
    Certificate: cacerts/localhost-${CA_PORT}-ca-${ORG_NAME}.pem
    OrganizationalUnitIdentifier: orderer" > "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/config.yaml"

	# Since the CA serves as both the organization CA and TLS CA, copy the org's root cert that was generated by CA startup into the org level ca and tlsca directories

	# Copy ${ORG_NAME}'s CA cert to ${ORG_NAME}'s /msp/tlscacerts directory (for use in the channel MSP definition)
	mkdir -p "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/tlscacerts"
	cp "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/tlscacerts/ca.crt"

	# Copy ${ORG_NAME}'s CA cert to ${ORG_NAME}'s /tlsca directory (for use by clients)
	mkdir -p "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/tlsca"
	cp "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/tlsca/tlsca.${ORG_NAME_DOMAIN}-cert.pem"

	# Copy ${ORG_NAME}'s CA cert to ${ORG_NAME}'s /ca directory (for use by clients)
	mkdir -p "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/ca"
	cp "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/ca/ca.${ORG_NAME_DOMAIN}-cert.pem"

	echo "Registering user"
	set -x
	fabric-ca-client register --caname ca-${ORG_NAME} --id.name user1 --id.secret user1pw --id.type client --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	echo "Registering the org admin"
	set -x
	fabric-ca-client register --caname ca-${ORG_NAME} --id.name ${ORG_NAME}admin --id.secret ${ORG_NAME}adminpw --id.type admin --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	echo "Generating the user msp"
	set -x
	fabric-ca-client enroll -u https://user1:user1pw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/users/User1@${ORG_NAME_DOMAIN}/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/config.yaml" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/users/User1@${ORG_NAME_DOMAIN}/msp/config.yaml"

	echo "Generating the org admin msp"
	set -x
	fabric-ca-client enroll -u https://${ORG_NAME}admin:${ORG_NAME}adminpw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/users/Admin@${ORG_NAME_DOMAIN}/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/config.yaml" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/users/Admin@${ORG_NAME_DOMAIN}/msp/config.yaml"



	# Define dynamic variables
	export PEER="peer0"

	echo "Registering ${PEER}"
	set -x
	fabric-ca-client register --caname ca-${ORG_NAME} --id.name ${PEER} --id.secret ${PEER}pw --id.type peer --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	echo "Generating the ${PEER} msp"
	set -x
	fabric-ca-client enroll -u https://${PEER}:${PEER}pw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/config.yaml" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/msp/config.yaml"

	echo "Generating the ${PEER}-tls certificates, use --csr.hosts to specify Subject Alternative Names"
	set -x
	fabric-ca-client enroll -u https://${PEER}:${PEER}pw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls" --enrollment.profile tls --csr.hosts ${PEER}.${ORG_NAME_DOMAIN} --csr.hosts localhost --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	# Copy the tls CA cert, server cert, server keystore to well known file names in the peer's tls directory that are referenced by peer startup config
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/tlscacerts/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/ca.crt"
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/signcerts/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/server.crt"
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/keystore/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/server.key"
		
		

	# Define dynamic variables
	export PEER="peer1"

	echo "Registering ${PEER}"
	set -x
	fabric-ca-client register --caname ca-${ORG_NAME} --id.name ${PEER} --id.secret ${PEER}pw --id.type peer --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	echo "Generating the ${PEER} msp"
	set -x
	fabric-ca-client enroll -u https://${PEER}:${PEER}pw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/config.yaml" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/msp/config.yaml"

	echo "Generating the ${PEER}-tls certificates, use --csr.hosts to specify Subject Alternative Names"
	set -x
	fabric-ca-client enroll -u https://${PEER}:${PEER}pw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls" --enrollment.profile tls --csr.hosts ${PEER}.${ORG_NAME_DOMAIN} --csr.hosts localhost --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	# Copy the tls CA cert, server cert, server keystore to well known file names in the peer's tls directory that are referenced by peer startup config
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/tlscacerts/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/ca.crt"
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/signcerts/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/server.crt"
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/keystore/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/server.key"
		
		
	}
	createGovernmentCertificates
function createIssuerCertificates(){
	# Define dynamic variables
	export ORG_NAME_DOMAIN="issuer.greencredits.com"
	export ORG_NAME="issuer"
	export CA_PORT=7094

	echo "Enrolling the CA admin"
	mkdir -p organizations/peerOrganizations/${ORG_NAME_DOMAIN}/

	export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/

	set -x
	fabric-ca-client enroll -u https://admin:adminpw@localhost:${CA_PORT} --caname ca-${ORG_NAME} --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

  echo "NodeOUs:
  Enable: true
  ClientOUIdentifier:
    Certificate: cacerts/localhost-${CA_PORT}-ca-${ORG_NAME}.pem
    OrganizationalUnitIdentifier: client
  PeerOUIdentifier:
    Certificate: cacerts/localhost-${CA_PORT}-ca-${ORG_NAME}.pem
    OrganizationalUnitIdentifier: peer
  AdminOUIdentifier:
    Certificate: cacerts/localhost-${CA_PORT}-ca-${ORG_NAME}.pem
    OrganizationalUnitIdentifier: admin
  OrdererOUIdentifier:
    Certificate: cacerts/localhost-${CA_PORT}-ca-${ORG_NAME}.pem
    OrganizationalUnitIdentifier: orderer" > "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/config.yaml"

	# Since the CA serves as both the organization CA and TLS CA, copy the org's root cert that was generated by CA startup into the org level ca and tlsca directories

	# Copy ${ORG_NAME}'s CA cert to ${ORG_NAME}'s /msp/tlscacerts directory (for use in the channel MSP definition)
	mkdir -p "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/tlscacerts"
	cp "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/tlscacerts/ca.crt"

	# Copy ${ORG_NAME}'s CA cert to ${ORG_NAME}'s /tlsca directory (for use by clients)
	mkdir -p "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/tlsca"
	cp "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/tlsca/tlsca.${ORG_NAME_DOMAIN}-cert.pem"

	# Copy ${ORG_NAME}'s CA cert to ${ORG_NAME}'s /ca directory (for use by clients)
	mkdir -p "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/ca"
	cp "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/ca/ca.${ORG_NAME_DOMAIN}-cert.pem"

	echo "Registering user"
	set -x
	fabric-ca-client register --caname ca-${ORG_NAME} --id.name user1 --id.secret user1pw --id.type client --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	echo "Registering the org admin"
	set -x
	fabric-ca-client register --caname ca-${ORG_NAME} --id.name ${ORG_NAME}admin --id.secret ${ORG_NAME}adminpw --id.type admin --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	echo "Generating the user msp"
	set -x
	fabric-ca-client enroll -u https://user1:user1pw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/users/User1@${ORG_NAME_DOMAIN}/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/config.yaml" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/users/User1@${ORG_NAME_DOMAIN}/msp/config.yaml"

	echo "Generating the org admin msp"
	set -x
	fabric-ca-client enroll -u https://${ORG_NAME}admin:${ORG_NAME}adminpw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/users/Admin@${ORG_NAME_DOMAIN}/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/config.yaml" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/users/Admin@${ORG_NAME_DOMAIN}/msp/config.yaml"



	# Define dynamic variables
	export PEER="peer0"

	echo "Registering ${PEER}"
	set -x
	fabric-ca-client register --caname ca-${ORG_NAME} --id.name ${PEER} --id.secret ${PEER}pw --id.type peer --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	echo "Generating the ${PEER} msp"
	set -x
	fabric-ca-client enroll -u https://${PEER}:${PEER}pw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/config.yaml" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/msp/config.yaml"

	echo "Generating the ${PEER}-tls certificates, use --csr.hosts to specify Subject Alternative Names"
	set -x
	fabric-ca-client enroll -u https://${PEER}:${PEER}pw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls" --enrollment.profile tls --csr.hosts ${PEER}.${ORG_NAME_DOMAIN} --csr.hosts localhost --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	# Copy the tls CA cert, server cert, server keystore to well known file names in the peer's tls directory that are referenced by peer startup config
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/tlscacerts/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/ca.crt"
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/signcerts/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/server.crt"
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/keystore/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/server.key"
		
		

	# Define dynamic variables
	export PEER="peer1"

	echo "Registering ${PEER}"
	set -x
	fabric-ca-client register --caname ca-${ORG_NAME} --id.name ${PEER} --id.secret ${PEER}pw --id.type peer --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	echo "Generating the ${PEER} msp"
	set -x
	fabric-ca-client enroll -u https://${PEER}:${PEER}pw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/config.yaml" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/msp/config.yaml"

	echo "Generating the ${PEER}-tls certificates, use --csr.hosts to specify Subject Alternative Names"
	set -x
	fabric-ca-client enroll -u https://${PEER}:${PEER}pw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls" --enrollment.profile tls --csr.hosts ${PEER}.${ORG_NAME_DOMAIN} --csr.hosts localhost --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	# Copy the tls CA cert, server cert, server keystore to well known file names in the peer's tls directory that are referenced by peer startup config
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/tlscacerts/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/ca.crt"
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/signcerts/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/server.crt"
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/keystore/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/server.key"
		
		
	}
	createIssuerCertificates
function createVerifierCertificates(){
	# Define dynamic variables
	export ORG_NAME_DOMAIN="verifier.greencredits.com"
	export ORG_NAME="verifier"
	export CA_PORT=7104

	echo "Enrolling the CA admin"
	mkdir -p organizations/peerOrganizations/${ORG_NAME_DOMAIN}/

	export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/

	set -x
	fabric-ca-client enroll -u https://admin:adminpw@localhost:${CA_PORT} --caname ca-${ORG_NAME} --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

  echo "NodeOUs:
  Enable: true
  ClientOUIdentifier:
    Certificate: cacerts/localhost-${CA_PORT}-ca-${ORG_NAME}.pem
    OrganizationalUnitIdentifier: client
  PeerOUIdentifier:
    Certificate: cacerts/localhost-${CA_PORT}-ca-${ORG_NAME}.pem
    OrganizationalUnitIdentifier: peer
  AdminOUIdentifier:
    Certificate: cacerts/localhost-${CA_PORT}-ca-${ORG_NAME}.pem
    OrganizationalUnitIdentifier: admin
  OrdererOUIdentifier:
    Certificate: cacerts/localhost-${CA_PORT}-ca-${ORG_NAME}.pem
    OrganizationalUnitIdentifier: orderer" > "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/config.yaml"

	# Since the CA serves as both the organization CA and TLS CA, copy the org's root cert that was generated by CA startup into the org level ca and tlsca directories

	# Copy ${ORG_NAME}'s CA cert to ${ORG_NAME}'s /msp/tlscacerts directory (for use in the channel MSP definition)
	mkdir -p "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/tlscacerts"
	cp "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/tlscacerts/ca.crt"

	# Copy ${ORG_NAME}'s CA cert to ${ORG_NAME}'s /tlsca directory (for use by clients)
	mkdir -p "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/tlsca"
	cp "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/tlsca/tlsca.${ORG_NAME_DOMAIN}-cert.pem"

	# Copy ${ORG_NAME}'s CA cert to ${ORG_NAME}'s /ca directory (for use by clients)
	mkdir -p "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/ca"
	cp "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/ca/ca.${ORG_NAME_DOMAIN}-cert.pem"

	echo "Registering user"
	set -x
	fabric-ca-client register --caname ca-${ORG_NAME} --id.name user1 --id.secret user1pw --id.type client --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	echo "Registering the org admin"
	set -x
	fabric-ca-client register --caname ca-${ORG_NAME} --id.name ${ORG_NAME}admin --id.secret ${ORG_NAME}adminpw --id.type admin --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	echo "Generating the user msp"
	set -x
	fabric-ca-client enroll -u https://user1:user1pw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/users/User1@${ORG_NAME_DOMAIN}/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/config.yaml" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/users/User1@${ORG_NAME_DOMAIN}/msp/config.yaml"

	echo "Generating the org admin msp"
	set -x
	fabric-ca-client enroll -u https://${ORG_NAME}admin:${ORG_NAME}adminpw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/users/Admin@${ORG_NAME_DOMAIN}/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/config.yaml" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/users/Admin@${ORG_NAME_DOMAIN}/msp/config.yaml"



	# Define dynamic variables
	export PEER="peer0"

	echo "Registering ${PEER}"
	set -x
	fabric-ca-client register --caname ca-${ORG_NAME} --id.name ${PEER} --id.secret ${PEER}pw --id.type peer --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	echo "Generating the ${PEER} msp"
	set -x
	fabric-ca-client enroll -u https://${PEER}:${PEER}pw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/config.yaml" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/msp/config.yaml"

	echo "Generating the ${PEER}-tls certificates, use --csr.hosts to specify Subject Alternative Names"
	set -x
	fabric-ca-client enroll -u https://${PEER}:${PEER}pw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls" --enrollment.profile tls --csr.hosts ${PEER}.${ORG_NAME_DOMAIN} --csr.hosts localhost --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	# Copy the tls CA cert, server cert, server keystore to well known file names in the peer's tls directory that are referenced by peer startup config
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/tlscacerts/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/ca.crt"
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/signcerts/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/server.crt"
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/keystore/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/server.key"
		
		

	# Define dynamic variables
	export PEER="peer1"

	echo "Registering ${PEER}"
	set -x
	fabric-ca-client register --caname ca-${ORG_NAME} --id.name ${PEER} --id.secret ${PEER}pw --id.type peer --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	echo "Generating the ${PEER} msp"
	set -x
	fabric-ca-client enroll -u https://${PEER}:${PEER}pw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/msp/config.yaml" "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/msp/config.yaml"

	echo "Generating the ${PEER}-tls certificates, use --csr.hosts to specify Subject Alternative Names"
	set -x
	fabric-ca-client enroll -u https://${PEER}:${PEER}pw@localhost:${CA_PORT} --caname ca-${ORG_NAME} -M "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls" --enrollment.profile tls --csr.hosts ${PEER}.${ORG_NAME_DOMAIN} --csr.hosts localhost --tls.certfiles "${PWD}/organizations/fabric-ca/${ORG_NAME}/ca-cert.pem"
	{ set +x; } 2>/dev/null

	# Copy the tls CA cert, server cert, server keystore to well known file names in the peer's tls directory that are referenced by peer startup config
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/tlscacerts/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/ca.crt"
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/signcerts/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/server.crt"
	cp "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/keystore/"* "${PWD}/organizations/peerOrganizations/${ORG_NAME_DOMAIN}/peers/${PEER}.${ORG_NAME_DOMAIN}/tls/server.key"
		
		
	}
	createVerifierCertificates